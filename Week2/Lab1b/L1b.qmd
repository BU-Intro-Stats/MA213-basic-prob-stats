---
title: "Lab1b"
format: revealjs
editor: visual
---

## Lab activities

In this lab, we are going to go over New York air quality data.

The following is the description of the data.

## **New York Air Quality Data**

> Description :
>
> Daily air quality measurements in New York, May to September 1973 stored within a data frame with 153 observations on 6 variables. It is obtained from the New York State Department of Conservation (ozone data) and the National Weather Service (meteorological data). It is cited by @chambers2018graphical.

## Loading some packages for plotting and summaries.

```{r, echo=TRUE}
library(ggplot2) # library for plotting 

library(dplyr) # library for data wrangling 
library(tidyr)
```

## Some useful functions to check the data

> `head(df)`: Displays the first six rows of the data frame.
>
> `tail(df)`: Displays the last six rows of the data frame.
>
> `str(df)`: Shows the structure of the data frame, including column types and sample values.
>
> `dplyr::glimpse(df)`: Provides a transposed, compact view of the data frame, making it easier to read.

## Checking missing values

> `is.na(df)`: Returns a logical values indicating missing (`NA`) values in the data frame.
>
> `na.omit(df)`: Removes rows with missing values (`NA`s) from the data frame.
>
> `unique(x)` : Returns a vector, data frame or array like x but with duplicate elements/rows removed.

## Import Airquality Data

You can use `airquality` object from base R data. You can also `airquality.csv` file where the data is stored as a comma separated value (CSV) file. Each row holds information for a single observation.

Import the data from `airquality.csv` and show first 6 rows to see how this data is organized.

```{r, echo=TRUE}
df = read.csv("airquality.csv")
head(df) 
```

## `glimpse` function in dplyr package

```{r, echo=TRUE}

dplyr::glimpse(df)

```

## Let's check if we have a missing value in the data.

```{r, echo=TRUE}
head(is.na(df))

```

## Let's work without missing value this time.

```{r, echo=TRUE}

df_filtered <- na.omit(df)
head(df_filtered)


```

## \* `tidyverse` package

`tidyverse` is a collection of R packages that includes famous data manipulation package `dplyr`, powerful data visualization package `ggplot2` (<https://github.com/tidyverse>).

## Data wrangling using `dplyr` package

> `%>%` : pipes operator
>
> It takes the output of the expression on its left and passes it as the first argument to the function on its right (it works like "`and then"` in English).
>
> We are briefly going over some basic functionalists in `dplyr` packages.

## Functions in `dplyr` package

> `select()` : Select columns from a data frame
>
> `filter()` : Filter rows based on conditions `mutate()` : Create or modify columns
>
> `group_by()` : Group data for aggregation (Groups data based on one or more variables)
>
> `summarise()` : Summarize data (Reduces data to summary statistics, like mean, sum, count, etc)

## `Dplyr` Examples 1

If you want `Ozone`, `Temp` and `Month` columns only from the data

```{r, echo=TRUE}

df_filtered %>%
  select(Ozone, Temp, Month)


```

## `Dplyr` Examples 2

You want only May data only

```{r, echo=TRUE}

df_filtered %>% 
  select_all() %>%
  filter(Month == 5)
  


```

## `Dplyr` Examples 3

You want the temperature in Celsius.

```{r, echo=TRUE}

df_filtered %>%
  mutate(Temp_C = (Temp-32)*(5/9))


```

## `Dplyr` Examples 4

You want to see the average temperature by Month in Celsius.

```{r, echo=TRUE}
df_filtered %>%
  mutate(Temp_C = (Temp-32)*(5/9)) %>%
  group_by(Month) %>%
  summarise(avg_temp_C = mean(Temp_C))

```

## Graphics with `ggplot2` package

Plotting with `ggplot2` package begins with

`ggplot(data = df, aes(x=x_xvariable, y=y_variable))`

where

`df` : your dataframe name,

`aes()` : Aesthetics to define -\> specifying which variables are mapped to the x and y axes.

## `geoms` functions

and then you add `geoms` functions â€“ geometrical objects as a graphical representation of the data in the plot (points, lines, bars). **`ggplot2`** offers many different geoms; We will use a few common ones today, including:

-   `geom_point()` : scatter plots, dot plots, etc.

-   `geom_line()` : trend lines, time-series, etc.

-   `geom_histogram()` : histograms

## Structure of `ggplot`

In short,

[![ggplot function overview (\<https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf\> )](ggplot.jpg)](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)

## ggplot example

```{r, echo=TRUE}

# ggplot version
ggplot(data=df_filtered, mapping=aes(x=Ozone, y=Temp)) + 
  geom_point()


```

## Numerical Data Analysis

We want to examine the shape of `Ozone` to see whether the data is symmetric, skewed or how the mean is centered and so on. Let's see how this `Ozone` data is shaped by using several different methods.

## 1. Summary of `Ozone`.

```{r, echo=TRUE}

summary(df_filtered$Ozone)
```

## 2. Dot plot of `Ozone`.

```{r, echo=TRUE}

stripchart(df_filtered$Ozone)

```

## 3. Stacked dot plot of `Ozone` .

```{r, echo=TRUE}

stripchart(df_filtered$Ozone, method = "stack")
# add a mean point 
mean_ozone <- mean(df_filtered$Ozone)
points(mean_ozone, 1, col="red", pch=19, cex = 1.5)

```

## Stacked dot plot with median point

```{r, echo=TRUE}

stripchart(df_filtered$Ozone, method = "stack")
# add a median point 
median_ozone <- median(df_filtered$Ozone)
points(median_ozone, 1, col="red", pch=19, cex = 1.5)

```

## Stacked dot plot ggplot2 version

```{r, echo=TRUE}
ggplot(data = df_filtered, aes(Ozone)) + 
  geom_dotplot() + 
  geom_vline(xintercept = median_ozone, color="red")

```

## 4. Box plot of `Ozone`.

```{r, echo=TRUE}
boxplot(df_filtered$Ozone)

```

## Box plot ggplot2 version

```{r, echo=TRUE}
ggplot(data=df_filtered, aes(Ozone)) +
  geom_boxplot()

```

## 5. Histogram of `Ozone` .

```{r, echo=TRUE}

hist(df_filtered$Ozone)

```

## Histogram ggplot2 version

```{r, echo=TRUE}
# ggplot version

ggplot(data=df_filtered ) + 
  geom_histogram(mapping=aes(Ozone), binwidth = 5) +
  geom_vline(xintercept = median_ozone, color = "red") 
  

```

## 6. Histogram of `Ozone` with different bins/breaks to show more information.

```{r, echo=TRUE}

hist(df_filtered$Ozone, breaks=30)


```

## Histogram ggplot2 version with different bin option

```{r, echo=TRUE}

# ggplot version

ggplot(data=df_filtered ) + geom_histogram(aes(Ozone), bins = 5)


ggplot(data=df_filtered, aes(Ozone)) + 
  geom_histogram(bins = 30) 

# breaks in hist() and bins in geom_histogra() works differently 
```

## labels in ggplot

```{r, echo=TRUE}



ggplot(data=df_filtered, aes(Ozone)) + 
  geom_histogram(bins = 30, color='yellow') +
  labs(x='Ozone Level', title = 'Histogram with 30 bins')


```

## 7. Scatter plot of `Ozone` and `Temp` .

We want to examine whether there is a relationship between ozone and temperature. How do we want to approach this?

```{r, echo=TRUE}

plot(df_filtered$Temp, df_filtered$Ozone)

```

## ggplot version

```{r, echo=TRUE}

ggplot(df_filtered) + geom_point(aes(x=Ozone, y=Temp)) + 
  labs(title='Scatter plot of Ozone vs Temperature')


```
